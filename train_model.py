import pickle
import joblib
import numpy as np
import pandas as pd
import sklearn.ensemble as ek
from sklearn.feature_selection import SelectFromModel
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split

# Load the dataset
dataset = pd.read_csv('dataset.csv', sep=',', low_memory=False)

# Data preprocessing: separate features (X) and target labels (y)
X = dataset.drop(['ID', 'md5', 'legitimate'], axis=1).values
y = dataset['legitimate'].values

# Feature selection using ExtraTreesClassifier
extratrees = ek.ExtraTreesClassifier().fit(X, y)
model = SelectFromModel(extratrees, prefit=True)
X_new = model.transform(X)  # Select important features
nbfeatures = X_new.shape[1]  # Number of selected features

print(f"Number of selected features: {nbfeatures}")

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_new, y, test_size=0.2)

# Identify and store the selected features
features = []
index = np.argsort(extratrees.feature_importances_)[::-1][:nbfeatures]
for f in range(nbfeatures):
    features.append(dataset.columns[2 + index[f]])
    print(f"{f + 1}. feature {dataset.columns[2 + index[f]]} ({extratrees.feature_importances_[index[f]]})")

# Define classifiers to evaluate
classifiers = {
    'RandomForestClassifier': ek.RandomForestClassifier(),
    'ExtraTreesClassifier': ek.ExtraTreesClassifier(),
    'GradientBoostingClassifier': ek.GradientBoostingClassifier()
}

# Train and evaluate each classifier
results = {}
for algo, clf in classifiers.items():
    clf.fit(X_train, y_train)  # Train the classifier
    score = clf.score(X_test, y_test)  # Evaluate the classifier
    print(f"{algo} : {score}")
    results[algo] = score

# Select the best classifier based on evaluation results
winner = max(results, key=results.get)
joblib.dump(classifiers[winner], 'model/model.pkl')  # Save the best model
model = classifiers[winner]

# Finding the optimal number of estimators for RandomForestClassifier
mi = 0
mp = 0
for i in range(1, 100):
    model = ek.RandomForestClassifier(n_estimators=i)
    model.fit(X_train, y_train)
    score = model.score(X_test, y_test)
    if mp < score:
        mi = i
        mp = score
        print(f"{mi} : {mp}")

# Using the best number of estimators found (e.g., 33)
model = ek.RandomForestClassifier(n_estimators=33)
model.fit(X_train, y_train)
score = model.score(X_test, y_test)
print(f"Accuracy: {score * 100} %")

# Save the final model and selected features
joblib.dump(model, "model/model.pkl")
with open('model/features.pkl', 'wb') as f:
    pickle.dump(features, f)

# Evaluate model performance on entire dataset
res = model.predict(X_new)
mt = confusion_matrix(y, res)
print(f"False positive rate : {(mt[0][1] / float(sum(mt[0]))) * 100} %")
print(f'False negative rate : {(mt[1][0] / float(sum(mt[1]))) * 100} %')
